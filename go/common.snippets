
snippet actor
type $1 struct {
	mQuit	chan bool
	mTicker *time.Ticker
}

func New$1(intervalInMs int) *$1 {
	return &$1{
		mQuit:   make(chan bool),
		mTicker: time.NewTicker(time.Duration(intervalInMs) * time.Millisecond),
	}
}

func (this *$1) Startup() {
	go this.loop()
}

func (this *$1) Shutdown() {
	this.mQuit <- true
}

func (this *$1) loop() {
	for {
		select {
		case <-this.mQuit:
			this.mTicker.Stop()
			return
		case <-this.mTicker.C:
			this.workflow()
		}
	}
}

func (this *$1) workflow() {
}
endsnippet

snippet perr
if err != nil {
	return fmt.Errorf("$1")
}
endsnippet

snippet testsuite
type $1 struct {
	suite.Suite
}

func (suite *$1) SetupSuite() {
}

func (suite *$1) TearDownSuite() {
}

func (suite *$1) SetupTest() {
}

func (suite *$1) TearDownTest() {
}

func (suite *$1) Test$2() {
}

func Test$1(t *testing.T) {
	suite.Run(t, new($1))
}
endsnippet

snippet interface
type I$1 interface {
	${2:F1}
	${3:F2}
	${4:F3}
	${5:F4}
	${6:F5}
}

type $1 struct {
}

func New$1 *$1 {
	return &$1{
	}
}

func (this *$1) $2 {
}

func (this *$1) $3 {
}

func (this *$1) $4 {
}

func (this *$1) $5 {
}

func (this *$1) $6 {
}

endsnippet
