
snippet actor
type $1 struct {
    mQuit	chan bool
    mTicker *time.Ticker
}

func New$1(interval time.Duration) *$1 {
    return &$1{
        mTicker: time.NewTicker(interval),
    }
}

func (this *$1) Startup() {
    go this.loop()
    this.mQuit = make(chan bool)
}

func (this *$1) Shutdown() {
    if this.mQuit != nil {
        close(this.mQuit)
        this.mQuit = nil
    }
}

func (this *$1) loop() {
    for {
        select {
            case <-this.mQuit:
                return
            case <-this.mTicker.C:
                this.main()
        }
    }
}

func (this *$1) main() {
}
endsnippet

snippet testsuite
type $1 struct {
    suite.Suite
}

func (suite *$1) SetupSuite() {
}

func (suite *$1) TearDownSuite() {
}

func (suite *$1) SetupTest() {
}

func (suite *$1) TearDownTest() {
}

func Test$1(t *testing.T) {
    suite.Run(t, new($1))
}

func (suite *$1) Test$2() {
}

endsnippet

snippet interface
type I$1 interface {
    ${2:F1}
    ${3:F2}
    ${4:F3}
    ${5:F4}
    ${6:F5}
}

type $1 struct {
}

func New$1 *$1 {
    return &$1{
    }
}

func (this *$1) $2 {
}

func (this *$1) $3 {
}

func (this *$1) $4 {
}

func (this *$1) $5 {
}

func (this *$1) $6 {
}

endsnippet

snippet deepcopy 
func DeepCopy(dst, src interface{}) error {
    var buf bytes.Buffer
    enc := gob.NewEncoder(&buf)
    dec := gob.NewDecoder(&buf)
    if err := enc.Encode(src); err != nil {
        return errors.Annotate(err, "gob.Encode")
    }
    return dec.Decode(dst)
}
endsnippet

snippet critical
func CriticalSection(locker sync.Locker, snippet func()) {
    locker.Lock()
    defer locker.Unlock()
    snippet()
}

endsnippet
